include partials/head
html
    body
        include partials/navbar
        .container
            .content-row
                div(role='main')
                    span#maincontent
                    link(href='/mod/charon/plugin/public/css/assignment.css', rel='stylesheet')
                    h1.title PR03 OK T12
                    #app.columns.assignment-columns
                        .column.is-two-thirds.assignment-content.content
                            p
                                | Kaust:
                                code pr03_ok
                            p
                                | Fail kaustas:
                                code ok.py
                            a(name='ulesande-sissejuhatus')
                            h2 Ülesande sissejuhatus
                            blockquote
                                p
                                    | Ülesande eesmärk on näidata, kuidas vormindada tähemärkide jadasid ehk sõnesid. Ükskõik mis programmeerimiskeeles eristuvad kirjutatavas koodis kaks osa: tekst, mille järgi arvuti arvutab ja käske täidab, ning tekst, mis on mõeldud inimestele ning mida arvuti ei tohiks tõlgendada käskudena, vaid peaks otsesõnu võtma. Sõned on näiteks
                                    code "Tere"
                                    | ,
                                    code ‘Koer’
                                    | ,
                                    code "ksdflk"
                                    |  jne. Küll ülesande lõpuks tajud.
                            p
                                | Kooli ajal aga võib tekkida tunne, et kõik on halvasti. Selle ennetamiseks teeme tekstipõhise teeb-kõik-korda nupu, mille netiversiooni leiad
                                a(href='http://make-everything-ok.com/', rel='nofollow noreferrer noopener', target='_blank') siit
                                | . Kui oled proff ja tahad dokumentatsiooni, kus kõik sõnedega seonduv kirjas on, vaata järgmisesse lõiku, muul juhul suundu edasi järgmise alapealkirja poole.
                            blockquote
                                p
                                    a(href='http://www.python.org/', rel='nofollow noreferrer noopener', target='_blank') Pythoni
                                    |  kodukalt leiad sõnedega seonduva dokumentatsiooni, kui valid:
                                dl
                                    dt
                                        a(href='https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str', rel='nofollow noreferrer noopener', target='_blank') Documentation>Python 3.x Docs>Library Reference>Text sequence type str
                                    dd Siit leiad kõik sõnespetsiifilised funktsioonid ja põhilise, mis sõnega seondub.
                                    dt
                                        a(href='https://docs.python.org/3/library/functions.html', rel='nofollow noreferrer noopener', target='_blank') Documentation>Python 3.x Docs>Library Reference>Built-in Functions
                                    dd Siit leiad kõik sisseehitatud funktsioonid, nende seast kasutame nii mõnda.
                                    dt
                                        a(href='https://docs.python.org/3/reference/lexical_analysis.html#literals', rel='nofollow noreferrer noopener', target='_blank')
                                            | Documentation>Python 3.x Docs>Language Reference>Literals>String and Bytes literals
                                    dd
                                        | Siit leiad sõnedega seonduvad pisiasjad ja nipid, mida kõik ei pruugi teada ja mis tulevad mõnes kohas kasuks.
                            a(name='make-everything-ok-nupp')
                            h2 "Make everything OK" nupp
                            p
                                | Küsime kasutajalt, kas tal on vaja, et ta mured korda tehtaks ja paneme selle eraldi funktsiooni
                                code wants_solving()
                                | , mis tagastab tõeväärtuse, kas lahendada mured või ei. Me ei taha, et kasutaja ei saa oma muresid lahendada selle tõttu, et me ei saa kasutajast aru, seega teeme
                                code while
                                | -tsükli, mis küsib kasutajalt sisendit igavesti. Kutsume pärast funktsiooni funktsiooni välja ka.
                            pre.
                                def wants_solving():
                                    while True:
                                        solve_worries = input("Would you like to make everything OK? (Y/N)")
                            p
                                | Selleks aga, et kasutaja sisendit me igavesti küsima ei jääks, saame
                                code while
                                | -tsüklist välja murda võtmesõnaga
                                code break
                                | .
                            pre.
                                def wants_solving():
                                    while True:
                                        solve_worries = input("Would you like to make everything OK? (Y/N)")
                                        break
                            p
                                | Kuna tahame, et funktsioonist murtaks välja vaid siis, kui sisend on
                                code "Y"
                                |  või
                                code "N"
                                | , teeme
                                code if
                                |  laused
                                code break
                                |  võtmesõna ümber.
                            pre.
                                def wants_solving():
                                    while True:
                                        solve_worries = input("Would you like to make everything OK? (Y/N)")
                                        if solve_worries == "Y":
                                            print("Let's go.")
                                            break
                                        elif solve_worries == "N":
                                            print("Alrighty then.")
                                            break
                                        else:
                                            print("Sorry, did not catch that.")
                            p
                                | Selle jaoks, et funktsiooni saaks kasutada olekuriba kuvamise või mittekuvamise otsustamiseks, võiks funktsioon tagastada tõeväärtuse selle kohta, kas kasutaja tahab, et kõik korda tehtaks.
                            pre.
                                def wants_solving():
                                    while True:
                                        solve_worries = input("Would you like to make everything OK? (Y/N)")
                                        if solve_worries == "Y":
                                            print("Let's go.")
                                            return True
                                        elif solve_worries == "N":
                                            print("Alrighty then.")
                                            return False
                                        else:
                                            print("Sorry, did not catch that.")
                            p
                                | Sellega on "Make Everything OK now" nupulaadne asjandus tehtud ja võib hakata olekuriba sepistama.
                            a(name='olekuriba')
                            h2 Olekuriba
                            blockquote
                                | Olekuribaga saame väljendada, kui kaugel mõni protsess on. Käsureal tehakse seda printides ja printimisel on abiks selline eriline märk nagu
                                em carriage return
                                | , mida Pythonis tähistatakse märgipaariga
                                code "\r"
                                | . Selleks aga, et Pycharm emuleeriks käsurida, võime teha
                                a(href='https://stackoverflow.com/questions/45012964/stdout-progress-bars-dont-work-in-pycharm', rel='nofollow noreferrer noopener', target='_blank') ühe seadistuse
                                |  : võta ülalt ribamenüüst Run>Edit Configurations>Configuration>Execution ja vajuta, et "Emulate terminal in output console" märkeruut oleks märgitud. Seda tuleb teha siis, kui olekuriba ei kuva end korralikult, muul juhul pole vaja.
                            p
                                | Hakkame äsja õpitut
                                code "\r"
                                |  märki katsetama. Enne aga vaatame, misasi on
                                code for
                                | -loop.
                            pre.
                                for i in [0, 1, 2, 3, 4, 5]:
                                    print(i)
                            p
                                | Et mitte numbreid ükshaaval tippida, võime kasutada
                                code range()
                                |  funktsiooni.
                            pre.
                                for i in range(5):
                                    print(i)
                            p
                                | Kuna aga tahame, et väljaprinditu tuleks samale reale ja kirjutaks juba olemasoleva üle, siis liidame
                                code "\r"
                                |  sõne numbri ette ja määrame
                                code end
                                |  parameetriga ära, et Python ei vahetaks rida.
                            pre.
                                for i in range(6):
                                    print("\r" + i, end='')
                            p Kirjuta ja käivita ülalolev kood.
                            blockquote
                                | Kood annab veateate: nimelt üritad liita sõne ja täisarvu, mis on kaks eri andmetüüpi Pythonis ja mille vahel liitmistehteid ei saa teha. Muudame numbri enne liitmist sõneks:
                            pre.
                                for i in range(6):
                                    print("\r" + str(i), end='')
                            p Käivita kood.
                            blockquote
                                | Nüüd prindib Python välja kõik numbrid nullist viieni, kuid reaalselt jõuame näha vaid viit. Selle jaoks, et me eelnevaid ka näeks, on vaja panna ajaline viide iga kord, kui me miskit välja prindime.
                            p
                                | Impordime mooduli
                                code time
                                |  ja kasutame sealt funktsiooni
                                code sleep()
                                | :
                            blockquote
                                | Moodul on lihtsalt üks .py fail, milles on meile tarvilikud funktsioonid või klassid. Kuna funktsioone võib olla metsik hulk, siis kõikide nende meeles ja kasutusvalmis hoidmine on arvutile asjata lisakoormus.  Seepärast impordime ja hoiame kasutusvalmis ainult neid mooduleid ja funktsioone, mida meil tarvis on.
                            pre.
                                import time
                                ...

                                for i in range(6):
                                    print("\r" + str(i), end='')
                                    time.sleep(1)
                            p Käivita kood.
                            blockquote
                                | Nii näeme sekundihaaval kõiki numbreid. Numbrid on küll head, aga tahaks näha reaalset riba, mis aja möödudes pikeneb.
                            p Kasutame üht sõne omadust: teda saab korrutada numbriga.
                            pre.
                                for i in range(6):
                                    print("\r" + "|" * i, end='')
                                    time.sleep(1)
                            p Käivita kood.
                            blockquote
                                | Nüüd hakkab rida pikenema küll, aga tavaliselt on olekureal algus ja lõpp ja protsessi nimi ja täituvuse protsent juures. See oleks suur peavalu, kui meil poleks abiks
                                a(href='https://docs.python.org/3/library/string.html#format-string-syntax', rel='nofollow noreferrer noopener', target='_blank') f-sõne dokumentatsiooni
                                | .
                            blockquote
                                | F-sõne dokumentatsioon sõnab, et f-sõne algab f-i ja sõnealgusmärgiga (jutumärk või ülakoma) ja lõpeb sõnealgusmärgiga. Sõne sees olevate loogeliste sulgude vahel olev on mingi muutujanimi. Muutujanimele võib järgneda hüüumärk ja üks muutmist tähistav märk (
                                code "!s"
                                | ,
                                code "!r"
                                |  või
                                code "!a"
                                |  ehk
                                em conversion
                                | ). Muutujanimele või
                                em conversion märgile
                                |  võib järgneda koolon ja posu sõne vormimist reguleerivaid tähiseid (
                                em format_spec
                                | ). Osade
                                em format_speci
                                |  ja
                                em conversioni
                                |  võimalustega tutvume praegu.
                            p
                                | Paneme prinditava f-sõnena kirja ja lisame olekureale alguse ja lõpupiirid kantsulgude näol:
                            pre.
                                print(f"\r[{'|' * i}]", end='')
                            p Käivita kood.
                            blockquote
                                p
                                    | Kui ilmub veateade, kontrolli, kas oled kasutanud ülakomasid või jutumärke sõne sees. Pea meeles, et kui kasutasid väljaspool jutumärke, pead seespool ülakomasid kasutama ja vastupidi. Muul juhul peaks ilmuma pikenev olekuriba.
                                p
                                    | Selleks aga, et algus ja lõpp oleksid paigal ja nende vaheline ala täituks püstkriipsudega, tuleb f-sõne osale anda teatud pikkus. Seda saab teha läbi koolonile järgneva
                                    em format_speci
                                    | .
                            p
                                | Peale koolonit saame kirjutada täidetava ruumi tähemärkide arvu (paneme hetkel suvakalt selleks 20), Python täidab ülejääva ruumi vaikeliselt tühikutega:
                            pre.
                                print(f"\r[{'|' * i:20}]", end='')
                            p Käivita kood.
                            blockquote
                                | Meie jaoks aga on tühikud igavad, täidame vaba ruumi hoopis punktidega. Seda aga tuleb teha joondusmärgisega koos: numbri ette läheb punkt ja väiksem-kui märk, mis sest, et vasakjoondus on vormindamisel vaikeväärtus. Dokumentatsioonist leiad veel kolm joondusmärgist (">", "=" ja "^"). Neid hetkel vaja ei lähe.
                            pre.
                                print(f"\r[{'|' * i:.<20}]", end='')
                            p Käivita kood.
                            blockquote
                                | Ilmub olekuriba, kus tühja ala täidavad punktid. Nüüd aga tahaks saada protsessi kohta infot.
                            p
                                | Paneme olekurea järele püstkriipsu, sõna
                                code "Process"
                                | , kooloni ja asendusvälja protsessi nime jaoks. Selle järele paneme asendusvälja protsendi jaoks (protsendi sammuks paneme hetkel oma suva järgi
                                code 0.05
                                | ).
                            blockquote
                                | Et kuvada protsenti, saame ära kasutada
                                em format_spec
                                |  võimalusi: paned sinna protsendimärgi, vormindab ta arvu ise protsendiks.
                            pre.
                                print(f"\r[{'|' * i:.<20}] | Process: {'Making everything OK'} {0.05 * i:%}", end='')
                            p Käivita kood.
                            blockquote
                                | Peaks ilmuma kogu info protsessi kohta. Kui tahame aga, et protsessi nimi ilmuks jutumärkides, kasutame
                                em conversioni
                                code !r
                                |  võimalust:
                            pre.
                                print(f"\r[{'|' * i:.<20}] | Process: {'Making everything OK'!r} {0.05 * i:%}", end='')
                            p Käivita kood.
                            blockquote
                                p Nüüd ilmub protsessi nimi jutumärkides.
                                p
                                    | Mõnikord aga tahame, et protsessi nimi oleks teistsugune, seega on mõistlik teha sellest koodijupist eraldi funktsioon ja asendada nimi parameetriga.
                            p
                                | Teeme funktsiooni
                                code progress_bar(process_name, seconds)
                                | , arvutame aja sammu, korrigeerime
                                code for
                                | -tsükli tsüklite arvu ja paneme aja sammu
                                code sleep()
                                |  funktsiooni argumendiks. Ärme unusta lisada funktsiooni välja kutsumisel aega.
                            pre.
                                def progress_bar(process_name, seconds):
                                    cycle_time = seconds / 20

                                    for i in range(21):
                                            print(f"\r[{'|' * i:.<20}] | Process: {process_name!r} {0.05 * i:%}", end='')
                                            time.sleep(cycle_time)
                                    print()

                                if __name__ == "__main__":
                                    progress_bar("Making everything OK", 5)
                            p Käivita kood.
                            blockquote
                                | Nüüd aga võib tekkida probleem, et protsessi nimi on liiga pikk, sest osad protsessid on pikkade nimedega, kuid õnneks aitab meid
                                em format_spec
                                |  hädast välja. Nimelt on omadus
                                em precision
                                | , mida tuunides saab asendusväljas oleva sõne pikkusele piiri panna: punkti järel olev punkt määrab asendussõne pikkuse.
                            p
                                | Lisame
                                em format_speci
                                |  punkti ja seame asendusvälja pikkuseks näiteks
                                code 25
                                |  tähemärki.
                            pre.
                                def progress_bar(process_name, seconds):
                                    cycle_time = seconds / 20

                                    for i in range(21):
                                            print(f"\r[{'|' * i:.<20}] | Process: {process_name!r:.25} {0.05 * i:%}", end='')
                                            time.sleep(cycle_time)
                                    print()

                                if __name__ == "__main__":
                                    progress_bar("Making everything OK", 5)
                                    progress_bar("abcdef" * 5, 5)
                            p Käivita kood.
                            blockquote
                                | Küllap märkad, et kuigi loogiliselt peaks olema teise olekurea protsessi nimi olema 30 tähemärki, katkeb nimi 25 tähemärgi juures. See oligi eesmärk, aga nüüd lõpeb protsessi nimi kuidagi äkki ja imelikult.
                            p
                                | Teeme protsessi nimele eeltöötluse. Salvestame muutujasse tähemärgipiirangu, kontrollime, kas protsessi nimi on liiga pikk ja teeme kolmese lause, mis määrab ära kuvatava nime.
                            pre.
                                def progress_bar(process_name, seconds):
                                    cycle_time = seconds / 20

                                    chr_limit = 25
                                    is_long = len(process_name) > chr_limit - 5

                                    if is_long:
                                        process_name = f"{process_name[:chr_limit - 5]}..."


                                    for i in range(21):
                                            print(f"\r[{'|' * i:.<20}] | Process: {process_name!r:.{chr_limit}} {0.05 * i:%}", end='')
                                            time.sleep(cycle_time)
                                    print()

                                if __name__ == "__main__":

                                    progress_bar("Making everything OK", 5)
                                    progress_bar("abcdef" * 5, 5)
                            p Käivita kood.
                            blockquote
                                | Küllap oled märganud juba, et ka protsendiväli teeb imelikke trikke. Selle jaoks paneme talle ka
                                em format_spec
                                | i.
                            p
                                | Määrame protsendi pikkuseks 3 tähemärki ja ütleme, et ta peab olema ümardatud täisarvuks.
                            pre.
                                print(f"\r[{'|' * i:.<20}] | Process: {process_name!r:.25} {0.05 * i:3.0%}", end='')
                            a(name='protsessi-kokkuvote')
                            h2 Protsessi kokkuvõte
                            blockquote
                                | Nüüd, kui kõik on korras, peaksime kasutajale aru andma, kuidas elu korda seadmine läks.
                            p
                                | Prindime teate, et kõik on nüüd okei ja paneme ta eraldi funktsiooni nimega
                                code print_ok()
                                |  sisse.
                            pre.
                                def print_ok():
                                    print("Everything is OK now.")
                            p Käivita kood.
                            a(name='rakenduse-kokkupanek')
                            h2 Rakenduse kokkupanek
                            blockquote
                                | Kood peaks töötama ja töö jooksul me oleme ta jaotanud ilusti väiksemateks funktsioonideks. Nüüd aga paneme ta kokku.
                            a(name='pohifunktsiooni-tegemine')
                            h3 Põhifunktsiooni tegemine
                            blockquote
                                | Põhifunktsioon on funktsioon, mis käivitab kõik teised funktsioonid selles järjekorras kuis vaja.
                            p
                                | Kirjutame faili algusse funktsiooni nimega
                                code main()
                                | :
                            pre.
                                def main():
                                    solve = wants_solving()
                                    if solve:
                                        progress_bar("Making everything OK")
                                        print_ok()
                            p Käivita kood.
                            blockquote
                                | Näeme veateadet: funktsiooni
                                code hello()
                                |  ei tunta ära. See on selle pärast, et Python on interpreteerija: ta loeb koodi rida-rea haaval ja ta ei tunne ära muutuja- või funktsiooninimesid, mis varem eelmistel ridadel määratud pole.
                            p Tõstame põhifunktsiooni koodifaili lõppu ja käivitame koodi uuesti.
                            blockquote
                                | Nüüd pole veateadet, sest Python tunneb kõik nimed ära, aga kui me ei käse tal põhifunktsiooni käivitada (ehk me ei kutsu teda välja), siis programm ise ei tee mitte muhvigi.
                            p
                                | Asendame
                                code if __name__ == "__main__":
                                |  aluse koodi:
                            pre.
                                if __name__ == "__main__":
                                    main()
                            p Käivitame koodi.
                            blockquote
                                | Näeme, et programm toimib. See imelik tingimuslause enne põhifunktsiooni välja kutsumist on selleks, et põhifunktsioon kutsutaks välja vaid siis, kui me isiklikult selle koodi käivitame. Ennegi oled kasutanud
                                code import
                                |  võtmesõna, et kasutada teiste moodulite funktsioone, sinu failiga saab teha sedasama! Kuid selleks, et importides keegi ei peaks vastama, mis ta vanus on, on too tingimuslause hädavajalik.
                            a(name='docstringid-ja-stiilipunktid')
                            h3 Docstringid ja stiilipunktid
                            blockquote
                                a(href='https://ained.ttu.ee/pydoc/documentation.html?highlight=docstring#docstring', rel='nofollow noreferrer noopener', target='_blank') Docstringid
                                |  on vajalikud selle jaoks, et tulevikus sina ja teised saaksid mingi kirjelduse ja kiire ülevaate, mida kood teeb. Stiil loeb koodides väga palju, sest kuigi koodi kirjutamist tuleb sinu tulevases elus palju, tuleb koodi lugemist veel rohkem. Selle jaoks, et kood oleks loetav, on kaks eeskirja: PEP8, mis ütleb, kuidas kood peab olema vormistatud, ja PEP256, mis määrab ära kommentaaride vormistuse.
                            p Selle jaoks, et stiili ühe punkti kätte saaksid,
                            ul
                                li
                                    | kirjuta faili algusesse kasvõi üherealine docstring, mis algab suure algustähega, lõppeb punktiga ja ei kasuta inglise keeles kolmandat isikut (sõna lõpus tasub s-tähte vältida),
                                li
                                    | kirjuta pärast funktsiooni päist kasvõi üherealine docstring, mis algab suure algustähega, lõppeb punktiga ja ei kasuta inglise keeles kolmandat isikut (sõna lõpus tasub s-tähte vältida),
                                li ära jäta funktsiooni docstringi järele tühja rida
                                li jäta faili lõppu üks tühi rida, millel pole muid tühimärke,
                                li jäta funktsioonide ja muu koodi vahele täpselt kaks tühja rida,
                                li
                                    | kõik
                                    code import
                                    |  võtmesõnad pane faili algusse pärast docstringi.
                            a(name='noudmised-koodile')
                            h3 Nõudmised koodile
                            p Esita kood, kui koodis on:
                            ul
                                li
                                    p
                                        | funktsioon
                                        code wants_solving()
                                        | , mis küsib, kas kasutaja tahab mured lahendada seni, kuni vastus läbib sisendikontrolli,
                                    blockquote
                                        p
                                            | Küsilauseks peab olema
                                            code 'Would you like to make everything OK? (Y/N)'
                                            | . Sisendi
                                            code 'Y'
                                            |  korral peab funktsioon printima
                                            code "Let's go."
                                            |  ja tagastama
                                            code True
                                            | ,
                                            code 'N'
                                            |  korral peab printima
                                            code "Alrighty then"
                                            |  ja tagastama
                                            code False
                                            | , muu sisendi korral
                                            code "Sorry, did not catch that."
                                            | .
                                li
                                    p
                                        | funktsioon
                                        code progress_bar(process_name, seconds)
                                        | , mis kuvab kasvavat olekuriba vastavalt ülesandes kirjeldatud vormindusele,
                                li
                                    p
                                        | funktsioon
                                        code print_ok()
                                        | , mis ütleb kasutajale, et kõik on korras juhul, kui mured lahendati,
                                    blockquote
                                        p
                                            | Printima peab sõne
                                            code "Everything is OK now."
                                            | .
                            p Probleemide ilmnemisel tõsta käsi või kutsu abi.
        include partials/footer